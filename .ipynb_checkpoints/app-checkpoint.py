{
 "cells": [
  {
   "cell_type": "code",
   "id": "980b9230-6de3-4c69-a114-841c103ce5a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import openai\n",
    "import os\n",
    "\n",
    "# ------------- SETUP -------------\n",
    "st.set_page_config(page_title=\"Hydro_chat 1.0\", page_icon=\"üèä\", layout=\"wide\")\n",
    "\n",
    "# Sidebar settings\n",
    "st.sidebar.title(\"‚öôÔ∏è Settings\")\n",
    "openai_api_key = st.sidebar.text_input(\"Enter OpenAI API Key\", type=\"password\")\n",
    "if openai_api_key:\n",
    "    openai.api_key = openai_api_key\n",
    "\n",
    "st.sidebar.write(\"### About Hydro_chat\")\n",
    "st.sidebar.info(\"A chatbot designed for competitive swimmers. It generates training plans, analyzes workouts, and provides injury advice.\")\n",
    "\n",
    "# ------------- DATA -------------\n",
    "datasets = {\n",
    "    \"swim_workouts\": [\"Freestyle endurance plan...\", \"Sprint training set...\", \"IM workout routine...\"],\n",
    "    \"dryland_workouts\": [\"Core strength session...\", \"Mobility drills...\", \"Strength endurance plan...\"],\n",
    "    \"session_analysis\": [\"Pacing review...\", \"Stroke efficiency breakdown...\", \"Lap time analysis...\"],\n",
    "    \"injury_advice\": [\"Shoulder pain recovery...\", \"Knee injury prevention...\", \"Reducing muscle cramps...\"],\n",
    "    \"general_knowledge\": [\"History of competitive swimming...\", \"Fastest swimmers of all time...\", \"Olympic records...\"]\n",
    "}\n",
    "\n",
    "# ------------- FUNCTIONS -------------\n",
    "def retrieve_relevant_data(service, query):\n",
    "    \"\"\"Retrieve relevant data from the placeholder dataset.\"\"\"\n",
    "    results = datasets.get(service, [])\n",
    "    return [result for result in results if query.lower() in result.lower()]\n",
    "\n",
    "def ask_llm_with_rag(service, query):\n",
    "    \"\"\"Retrieve context and query OpenAI's GPT model.\"\"\"\n",
    "    context = retrieve_relevant_data(service, query)\n",
    "    combined_prompt = f\"Context: {context}\\n\\nQuery: {query}\\n\\nAnswer concisely and accurately:\"\n",
    "    \n",
    "    if not openai.api_key:\n",
    "        return \"‚ö†Ô∏è Please enter your OpenAI API key in the sidebar.\"\n",
    "\n",
    "    response = openai.Completion.create(\n",
    "        engine=\"gpt-3.5-turbo\",\n",
    "        prompt=combined_prompt,\n",
    "        max_tokens=300,\n",
    "        temperature=0.7\n",
    "    )\n",
    "    return response[\"choices\"][0][\"text\"].strip()\n",
    "\n",
    "def save_feedback(question, answer):\n",
    "    \"\"\"Save user interactions to feedback.csv.\"\"\"\n",
    "    feedback_file = \"feedback.csv\"\n",
    "    df = pd.DataFrame({\"Question\": [question], \"Answer\": [answer]})\n",
    "    df.to_csv(feedback_file, mode='a', header=not os.path.exists(feedback_file), index=False)\n",
    "\n",
    "# ------------- UI DESIGN -------------\n",
    "st.title(\"üèä Hydro_chat 1.0\")\n",
    "st.write(\"Ask about workouts, training analysis, injuries, or swimming knowledge.\")\n",
    "\n",
    "# User input\n",
    "question_type = st.selectbox(\"Select your query type:\", \n",
    "    [\"Workout\", \"Dryland Workout\", \"Workout Session Analysis\", \"Injury Advice\", \"General Knowledge\"])\n",
    "\n",
    "query = st.text_area(\"Enter your question or workout details:\")\n",
    "\n",
    "# Chat history section\n",
    "with st.expander(\"üí¨ Chat History\", expanded=False):\n",
    "    if os.path.exists(\"feedback.csv\"):\n",
    "        df = pd.read_csv(\"feedback.csv\")\n",
    "        st.dataframe(df.tail(10))  # Show last 10 interactions\n",
    "\n",
    "# Button to send query\n",
    "if st.button(\"Ask Hydro_chat üöÄ\"):\n",
    "    if query.strip() == \"\":\n",
    "        st.warning(\"Please enter a valid query.\")\n",
    "    else:\n",
    "        with st.spinner(\"Generating response...\"):\n",
    "            response = ask_llm_with_rag(question_type.lower().replace(\" \", \"_\"), query)\n",
    "            st.success(\"‚úÖ Response Generated!\")\n",
    "            st.write(f\"**ü§ñ Hydro_chat:** {response}\")\n",
    "            save_feedback(query, response)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
